// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var app;

  app = angular.module('myApp', ['angularplasmid']);

  app.controller('LoadPlasmids', function($scope, $http) {
    $scope.size = 200;
    $http({
      method: 'POST',
      url: 'js/plasmiddata.json'
    }).success(function(data) {
      var a, af, assigned_features, feature, feature_overlaps, i, j, k, len, len1, len2, plasmid, ref;
      feature_overlaps = function(f1, f2) {
        var e, origin, overlap, ref, ref1, s;
        console.log("feature overlap");
        overlap = false;
        if (f2.shell === f1.shell) {
          s = f2.start;
          e = f2.stop;
          origin = false;
          if (s > e) {
            origin = true;
            s = f2.stop;
            e = f2.start;
          }
          if ((s <= (ref = f1.start) && ref <= e)) {
            if (origin) {
              overlap = false;
            } else {
              overlap = true;
            }
          }
          if ((s <= (ref1 = f1.stop) && ref1 <= e)) {
            if (origin) {
              overlap = false;
            } else {
              overlap = true;
            }
          }
          if (overlap) {
            console.log(s, e, f1.start, f1.stop);
          }
        }
        return overlap;
      };
      alert(data.length);
      for (i = 0, len = data.length; i < len; i++) {
        plasmid = data[i];
        assigned_features = [];
        plasmid.features = plasmid.features.sort(function(a, b) {
          var x, y;
          x = Math.abs(a.start - a.stop);
          y = Math.abs(b.start - b.stop);
          return x - y;
        });
        plasmid.features.reverse();
        console.log([
          (function() {
            var j, len1, ref, results;
            ref = plasmid.features;
            results = [];
            for (j = 0, len1 = ref.length; j < len1; j++) {
              a = ref[j];
              results.push(Math.abs(a.start - a.stop));
            }
            return results;
          })()
        ]);
        ref = plasmid.features;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          feature = ref[j];
          if (!feature.shell) {
            feature.shell = 1;
            for (k = 0, len2 = assigned_features.length; k < len2; k++) {
              af = assigned_features[k];
              if (feature_overlaps(feature, af)) {
                feature.shell = feature.shell + 1;
              }
            }
            assigned_features.push(feature);
          }
        }
      }
      return $scope.plasmids = data;
    });
    $http({
      method: 'POST',
      url: '../../alignment_viewer/data.json'
    }).success(function(data) {
      return $scope.contigs = data;
    });
    $http({
      method: 'POST',
      url: '../../alignment_viewer/primer_data.json'
    }).success(function(data) {
      return $scope.primers = data;
    });
    $http({
      method: 'POST',
      url: '../../alignment_viewer/bestassembly.json'
    }).success(function(data) {
      return $scope.assembly = data;
    });
    return $scope.color = function() {
      var c;
      c = "rgba(" + (Math.ceil(Math.random() * 255)) + "," + (Math.ceil(Math.random() * 255)) + "," + (Math.ceil(Math.random() * 255)) + "," + 0.9 + ")";
      return c;
    };
  });

}).call(this);

//# sourceMappingURL=LoadPlasmidCoffee.js.map
