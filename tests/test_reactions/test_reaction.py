import random

from jdna import Sequence, Reaction


def test_pcr():
    def pcr(template, fi, fj, foh, ri, rj, roh):
        f = Sequence()
        r = Sequence().reverse_complement()
        expected = foh + str(template)[fi:rj] + roh
        products = Reaction.pcr(template, f, r)
        assert str(expected).lower() == str(products[0]).lower()
        return products

    template = Sequence()
    random_overhang1 = ''.join([random.choice('atcg') for _ in range(20)])
    random_overhang2 = ''.join([random.choice('atcg') for _ in range(21)])
    pcr(template, 0, 20, random_overhang1, len(template) - 20, len(template), random_overhang2)[0]


def test_cyclic_pcr():
    def pcr(template_seq, fi, fj, foh, ri, rj, roh):
        f = Sequence()
        r = Sequence().reverse_complement()
        expected = foh + str(template_seq)[fi:] + str(template_seq)[:rj] + roh
        products = Reaction.pcr(template_seq, f, r)
        assert str(expected).lower() == str(products[0]).lower()
        return products

    template = Sequence()
    template.circularize()
    random_overhang1 = ''.join([random.choice('atcg') for x in range(20)])
    random_overhang2 = ''.join([random.choice('atcg') for x in range(21)])
    pcr(template, len(template) - 40, len(template) - 20, random_overhang1, 100, 120, random_overhang2)[0]


def test_gibson():
    def ran_seq(l):
        return ''.join([random.choice('agtc') for x in range(l)])

    def create_product(template, oh1, oh2):
        f = Sequence()
        r = Sequence().reverse_complement()
        return Reaction.pcr(template, f, r)[0]

    f1 = Sequence()
    f2 = Sequence()
    f3 = Sequence()
    f4 = Sequence()

    oh1 = ran_seq(20)
    oh2 = ran_seq(20)
    oh3 = ran_seq(20)
    oh4 = ran_seq(20)
    frag1 = create_product(f1, oh1, oh2)
    frag2 = create_product(f2, oh2, oh3)
    frag3 = create_product(f3, oh3, oh4)
    frag4 = create_product(f4, oh4, oh1)
    fragments = [frag1, frag2, frag3, frag4]
    products = Reaction.homology_assembly(fragments, True)
    expected = ''.join([str(x) for x in [oh1, f1, oh2, f2, oh3, f3, oh4, f4]])
    assert len(products[0].search_all(Sequence())) == 1


def test_gibson_fail():
    def ran_seq(l):
        return ''.join([random.choice('agtc') for x in range(l)])

    def create_product(template, oh1, oh2):
        f = Sequence()
        r = Sequence().reverse_complement()
        return Reaction.pcr(template, f, r)[0]

    f1 = Sequence()
    f2 = Sequence()
    f3 = Sequence()
    f4 = Sequence()

    oh1 = ran_seq(20)
    oh2 = ran_seq(20)
    oh3 = ran_seq(20)
    oh4 = ran_seq(20)
    frag1 = create_product(f1, oh1, ran_seq(20))
    frag2 = create_product(f2, oh2, oh3)
    frag3 = create_product(f3, oh3, oh4)
    frag4 = create_product(f4, oh4, oh1)
    fragments = [frag1, frag2, frag3, frag4]
    products = Reaction.homology_assembly(fragments, True)
    assert len(products) == 0


def test_gibsons_with_inversions():
    def ran_seq(l):
        return ''.join([random.choice('agtc') for x in range(l)])

    def create_product(template, oh1, oh2):
        f = Sequence()
        r = Sequence().reverse_complement()
        return Reaction.pcr(template, f, r)[0]

    f1 = Sequence()
    f2 = Sequence()
    f3 = Sequence()
    f4 = Sequence()

    oh1 = ran_seq(20)
    oh2 = ran_seq(20)
    oh3 = ran_seq(20)
    oh4 = ran_seq(20)
    frag1 = create_product(f1, oh1, oh2)
    frag2 = create_product(f2, oh2, oh3)
    frag3 = create_product(f3, oh3, oh4)
    frag4 = create_product(f4, oh4, oh1)

    fragments = [frag1, frag2.reverse_complement(), frag3, frag4]
    products = Reaction.homology_assembly(fragments, True)
    expected = ''.join([str(x) for x in [oh1, f1, oh2, f2, oh3, f3, oh4, f4]])
    assert len(products[0].search_all(Sequence())) == 1
    features = products[0].get_features()
    assert 1 == len(features)


def test_gibson_feature_fusion():

    template = Sequence()
    template.create_feature('feature', 'type', 0, len(template) - 1)
    template.circularize()

    p1 = Sequence()
    p2 = Sequence().reverse_complement()
    p3 = Sequence()
    p4 = Sequence().reverse_complement()

    frag1 = Reaction.pcr(template, p1, p2)[0]
    frag2 = Reaction.pcr(template, p3, p4)[0]
    print(frag2)
    fragments = [frag1, frag2]
    products = Reaction.homology_assembly(fragments, True)
    expected = str(template)
    print((frag1.get_features()))
    print((frag2.get_features()))
    print((template.get_features()))
    assert len(products[0].search_all(Sequence())) == 1


def test_overlap_extension_pcr():
    def ran_seq(l):
        return ''.join([random.choice('agtc') for x in range(l)])

    def create_product(template, oh1, oh2):
        f = Sequence()
        r = Sequence().reverse_complement()
        return Reaction.pcr(template, f, r)[0]

    f1 = Sequence()
    f2 = Sequence()

    oh1 = ran_seq(20)
    oh2 = ran_seq(20)
    oh3 = ran_seq(20)
    frag1 = create_product(f1, oh1, oh2)
    frag2 = create_product(f2, oh2, oh3)

    Reaction.overlap_extension_pcr([frag1, frag2], 1, 2)

# def test_pcr():
#     p1 = Sequence(sequence='AGTTGATTGTATGCTTGGTATAGCTTGAAATATTTTGTAGATCCACTAGTTCTAGAATCC')
#     p2 = Sequence(sequence='ATTAGTTATGTCACGCTTACATTCACGTGATACCGTCGACCTCGAGTC')
#     t = """
#     AGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTGCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGAAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTCTAAGAAACCATTATTATCATGACATTAACCTATAAAAATAGGCGTATCACGAGGCCCTTTCGTCTCGCGCGTTTCGGTGATGACGGTGAAAACCTCTGACACATGCAGCTCCCGGAGACGGTCACAGCTTGTCTGTAAGCGGATGCCGGGAGCAGACAAGCCCGTCAGGGCGCGTCAGCGGGTGTTGGCGGGTGTCGGGGCTGGCTTAACTATGCGGCATCAGAGCAGATTGTACTGAGAGTGCACCATAGTTTAAACTGTGGCTGTGGTTTCAGGGTCCATAAAGCTTTTCAATTCATCTTTTTTTTTTTTGTTCTTTTTTTTGATTCCGGTTTCTTTGAAATTTTTTTGATTCGGTAATCTCCGAGCAGAAGGAAGAACGAAGGAAGGAGCACAGACTTAGATTGGTATATATACGCATATGTGGTGTTGAAGAAACATGAAATTGCCCAGTATTCTTAACCCAACTGCACAGAACAAAAACCTGCAGGAAACGAAGATAAATCATGTCGAAAGCTACATATAAGGAACGTGCTGCTACTCATCCTAGTCCTGTTGCTGCCAAGCTATTTAATATCATGCACGAAAAGCAAACAAACTTGTGTGCTTCATTGGATGTTCGTACCACCAAGGAATTACTGGAGTTAGTTGAAGCATTAGGTCCCAAAATTTGTTTACTAAAAACACATGTGGATATCTTGACTGATTTTTCCATGGAGGGCACAGTTAAGCCGCTAAAGGCATTATCCGCCAAGTACAATTTTTTACTCTTCGAAGACAGAAAATTTGCTGACATTGGTAATACAGTCAAATTGCAGTACTCTGCGGGTGTATACAGAATAGCAGAATGGGCAGACATTACGAATGCACACGGTGTGGTGGGCCCAGGTATTGTTAGCGGTTTGAAGCAGGCGGCGGAAGAAGTAACAAAGGAACCTAGAGGCCTTTTGATGTTAGCAGAATTGTCATGCAAGGGCTCCCTAGCTACTGGAGAATATACTAAGGGTACTGTTGACATTGCGAAGAGCGACAAAGATTTTGTTATCGGCTTTATTGCTCAAAGAGACATGGGTGGAAGAGATGAAGGTTACGATTGGTTGATTATGACACCCGGTGTGGGTTTAGATGACAAGGGAGACGCATTGGGTCAACAGTATAGAACCGTGGATGATGTGGTCTCTACAGGATCTGACATTATTATTGTTGGAAGAGGACTATTTGCAAAGGGAAGGGATGCTAAGGTAGAGGGTGAACGTTACAGAAAAGCAGGCTGGGAAGCATATTTGAGAAGATGCGGCCAGCAAAACTAAGCGAATTTCTTATGATTTATGATTTTTATTATTAAATAAGTTATAAAAAAAATAAGTGTATACAAATTTTAAAGTGACTCTTAGGTTTTAAAACGAAAATTCTTATTCTTGAGTAACTCTTTCCTGTAGGTCAGGTTGCTTTCTCAGGTATAGCATGAGGTCGCTCTTATTGACCACACCTCCCTTAACCAGATTCGAAAAGCGGCAAGAAATGATGGTAAATGAAATAGGAAATCAAGGAGCATGAAGGCAAAAGACAAATATAAGGGTCGAACGAAAAATAAAGTGAAAAGTGTTGATATGATGTATTTGGCTTTGCGGCGCCGAAAAAACGAGTTTACGCAATTGCACAATCATGCTGACTCTGTGGCGGACCCGCGCTCTTGCCGGCCCGGCGATAACGCTGGGCGTGAGGCTGTGCCCGGCGGAGTTTTTTGCGCCTGCATTTTCCAAGGTTTACCCTGCGCTAAGGGGCGAGATTGGAGAAGCAATAAGAATGCCGGTTGGGGTTGCGATGATGACGACCACGACAACTGGTGTCATTATTTAAGTTGCCGAAAGAACCTGAGTGCATTTGCAACATGAGTATACTAGAAGAATGAGCCAAGACTTGCGAGACGCGAGTTTGCCGGTGGTGCGAACAATAGAGCGACCATGACCTTGAAGGTGAGACGCGCATAACCGCTAGAGTACTTTGAAGAGGAAACAGCAATAGGGTTGCTACCAGTATAAATAGACAGGTACATACAACACTGGAAATGGTTGTCTGTTTGAGTACGCTTTCAATTCATTTGGGTGTGCACTTTATTATGTTACAATATGGAAGGGAACTTTACACTTCTCCTATGCACATATATTAATTAAAGTCCAATGCTAGTAGAGAAGGGGGGTAACACCCCTCCGCGCTCTTTTCCGATTTTTTTCTAAACCGTGGAATATTTCGGATATCCTTTTGTTGTTTCCGGGTGTACAATATGGACTTCCTCTTTTCTGGCAACCAAACCCATACATCGGGATTCCTATAATACCTTCGTTGGTCTCCCTAACATGTAGGTGGCGGAGGGGAGATATACAATAGAACAGATACCAGACAAGACATAATGGGCTAAACAAGACTACACCAATTACACTGCCTCATTGATGGTGGTACATAACGAACTAATACTGTAGCCCTAGACTTGATAGCCATCATCATATCGAAGTTTCACTACCCTTTTTCCATTTGCCATCTATTGAAGTAATAATAGGCGCATGCAACTTCTTTTCTTTTTTTTTCTTTTCTCTCTCCCCCGTTGTTGTCTCACCATATCCGCAATGACAAAAAAATGATGGAAGACACTAAAGGAAAAAATTAACGACAAAGACAGCACCAACAGATGTCGTTGTTCCAGAGCTGATGAGGGGTATCTCGAAGCACACGAAACTTTTTCCTTCCTTCATTCACGCACACTACTCTCTAATGAGCAACGGTATACGGCCTTCCTTCCAGTTACTTGAATTTGAAATAAAAAAAAGTTTGCTGTCTTGCTATCAAGTATAAATAGACCTGCAATTATTAATCTTTTGTTTCCTCGTCATTGTTCTCGTTCCCTTTCTTCCTTGTTTCTTTTTCTGCACAATATTTCAAGCTATACCAAGCATACAATCAACTATCTCATATACACGGATTCTAGAACTAGTGGATCTACAAAACCAACGCAAAAAGATTTAGTGGGGAACGTGATTGAATAACTTTGGATGTCTAAAGGTGAAGAATTATTCACTGGTGTTGTCCCAATTTTGGTTGAATTAGATGGTGATGTTAATGGTCACAAATTTTCTGTCTCCGGTGAAGGTGAAGGTGATGCTACTTACGGTAAATTGACCTTAAAATTTATTTGTACTACTGGTAAATTGCCAGTTCCATGGCCAACCTTAGTCACTACTTTCGGTTATGGTGTTCAATGTTTTGCGAGATACCCAGATCATATGAAACAACATGACTTTTTCAAGTCTGCCATGCCAGAAGGTTATGTTCAAGAAAGAACTATTTTTTTCAAAGATGACGGTAACTACAAGACCAGAGCTGAAGTCAAGTTTGAAGGTGATACCTTAGTTAATAGAATCGAATTAAAAGGTATTGATTTTAAAGAAGATGGTAACATTTTAGGTCACAAATTGGAATACAACTATAACTCTCACAATGTTTACATCATGGCTGACAAACAAAAGAATGGTATCAAAGTTAACTTCAAAATTAGACACAACATTGAAGATGGTTCTGTTCAATTAGCTGACCATTATCAACAAAATACTCCAATTGGTGATGGTCCAGTCTTGTTACCAGACAACCATTACTTATCCACTCAATCTGCCTTATCCAAAGATCCAAACGAAAAGAGAGACCACATGGTCTTGTTAGAATTTGTTACTGCTGCTGGTATTACCCATGGTATGGATGAATTGTACAAATAATGATACCGTCGACCTCGAGTCAATTAGTTATGTCACGCTTACATTCACGCCCTCCCCCCACATCCGCTCTAACCGAAAAGGAAGGAGTTAGACAACCTGAAGTCTAGGTCCCTATTTATTTTTTTATAGTTATGTTAGTATTAAGAACGTTATTTATATTTCAAATTTTTCTTTTTTTTCTGTACAGACGCGTGTACGCATGTAACATTATACTGAAAACCTTGCTTGAGAAGGTTTTGGGACGCTCGAAGGCTTTAATTTGATGTCGTAATAACCCCGCCCCGAAAACTGTATTATAAGTAAATGCATGTATACTAAACTCACAAATTAGAGCTTCAATTTAATTATATCAGTTATTACCCGGGAATCTCGGTCGTAATGATTTCTATAATGACGAAAAAAAAAAAATTGGAAAGAAAAAGCTTCATGGCCTTTATAAAAAGGAACTATCCAATACCTCGCCAGAACCAAGTAACAGTATTTTACGGGGCACAAATCAAGAACAATAAGACAGGACTGTAAAGATGGACGCATTGAACTCCAAAGAACAACAAGAGTTCCAAAAAGTAGTGGAACAAAAGCAAATGAAGGATTTCATGCGTTTGTACTCTAATCTGGTAGAAAGATGTTTCACAGACTGTGTCAATGACTTCACAACATCAAAGCTAACCAATAAGGAACAAACATGCATCATGAAGTGCTCAGAAAAGTTCTTGAAGCATAGCGAACGTGTAGGGCAGCGTTTCCAAGAACAAAACGCTGCCTTGGGACAAGGCTTGGGCCGGTTTAAACCATGGTCATAGCTGTTTCCTGTGTGAAATTGTTATCCGCTCACAATTCCACACAACATACGAGCCGGAAGCATAAAGTGTAAAGCCTGGGGTGCCTAATGAGTGAGGTAACTCACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTCGGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTCCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCAATGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGGACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGAC
#     """.strip()
#     Reaction.pcr
